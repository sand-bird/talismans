-----------------------------------------------------------------------
         C H A R M   P R O P E R T Y   D E P E N D E N C I E S        
-----------------------------------------------------------------------
 
TRICKLE ORDER (not including decoration-related properties):

 
 rarity -> type -> maxSlots -> slots
            |
            '-> availableSkills -> skills -> skillLevels -> skillValues

(This is a rough guide. There are a couple of exceptions, such as that 
setting a (second-slot) skillValue to 0 sets its skill to 0 (empty) as 
well. That relationship is shown in the full dependency chart below.)

    

FULL DEPENDENCY CHART:
    

 filledSlots** -----------------------------------> canDecreaseSlots
                                               |
                                .--> slots* ---+       
 rarity*        .--> maxSlots --|              |
   |            |               '-----------------> canIncreaseSlots
   |            |
   '--> type* --+------------------------.                        
                |                        |
                '--> availableSkills     |--> skillLevels
 minRarity**             |               |       |
                         '--> skills* ---'       '--> skillValues*
                                 ^                       ^
 decorations*                    '-----------------------'



DEPENDENCY CHART LEGEND:

 Many properties are watched; all are computed. Computed properties 
 update automatically whenever a variable used in the property's
 compute function changes.

                  .--> compute function depends on parentProperty
 parentProperty --|
       |          '--> compute function depends on parentProperty
       |
       '---> updated manually inside a watcher for parentProperty
 
  * properties corresponding to game data (all are integers)
 ** properties derived from game data but not mutated or saved
    (currently, both are derived from the decorations property)
